
组件初始化
=================



框架源码路径
components/drivers/include/drivers/pin.h
components/drivers/misc/pin.c

底层实现
drv_gpio.c
drv_gpio.h




对于整个RT-thread的组件初始化以及设备IO的认识
--------------------------------------------

这几天看了下RT-thread整个完整版的代码过程，之前只接触过Nano版本，其中完整版确实存在很多不一样的东西，
其中感受最大的是组件初始化以及设备驱动IO模型相关。

组件初始化
---------------------------

组件初始化化包括以下几个函数：

.. code-block:: c
   :caption: 组件初始化
   :linenos:


	#define INIT_BOARD_EXPORT(fn)           INIT_EXPORT(fn, "1")
	#define INIT_PREV_EXPORT(fn)            INIT_EXPORT(fn, "2")
	#define INIT_DEVICE_EXPORT(fn)          INIT_EXPORT(fn, "3")
	#define INIT_COMPONENT_EXPORT(fn)       INIT_EXPORT(fn, "4")
	#define INIT_ENV_EXPORT(fn)             INIT_EXPORT(fn, "5")
	#define INIT_APP_EXPORT(fn)             INIT_EXPORT(fn, "6")

其中的 INIT_EXPORT 宏的展开如下

.. code-block:: c
   :linenos:

	#define INIT_EXPORT(fn, level)                                                       \
		const char __rti_##fn##_name[] = #fn;                                            \
		RT_USED const struct rt_init_desc __rt_init_desc_##fn SECTION(".rti_fn."level) = \
		{ __rti_##fn##_name, fn};

	#define RT_USED                     	__attribute__((used))
	#define SECTION(x)                  __attribute__((section(x)))

完整宏展开如下

.. code-block:: c
   :linenos:

	INIT_EXPORT(fn, level) 
		__attribute__((used)) const int (*__rt_init_##fn)(void)  __attribute__(section(".rti_fn."level)) = fn


其中__attribute__ 用于指定编译属性，section关键字可以将变量定义到指定的输入段中


而在执行main函数之前，RT-thread会先调用rtthread_startup()函数，

.. code-block:: c
   :linenos:

	1.rtthread_startup
		rt_hw_board_init
			rt_components_board_init
		
	2.rtthread_startup
		rt_application_init
			rt_init_thread_entry
				rt_components_init

以上代码会执行输入段中的函数指针


RT-thread启动流程：https://www.rt-thread.org/document/api/group___system_init.html#details


关于设备管理
----------------

RT-thread提供了一个设备子系统，用于协助应用程序和驱动之间的通信，

设备系统为驱动程序提供五个接口：

打开，打开设备
关闭，关闭设备
读取，读取设备中的一些数据
写入，将一些数据写入设备
控制，向设备发送一些控制命令


设备类型包括以下几种

.. code-block:: txt
   :linenos:

	RT_Device_Class_Char 			字符设备
	RT_Device_Class_Block 			块设备
	RT_Device_Class_NetIf 			网络接口设备
	RT_Device_Class_MTD 			存储设备
	RT_Device_Class_CAN 			CAN 设备
	RT_Device_Class_RTC 			RTC 设备
	RT_Device_Class_Sound 			音频设备
	RT_Device_Class_Graphic 		图形设备
	RT_Device_Class_I2CBUS 			I2C 总线设备
	RT_Device_Class_USBDevice 		USB从设备
	RT_Device_Class_USBHost 		USB主机总线
	RT_Device_Class_SPIBUS 			SPI总线设备
	RT_Device_Class_SPIDevice 		SPI 从设备
	RT_Device_Class_SDIO 			SDIO 设备
	RT_Device_Class_PM 				电源管理设备
	RT_Device_Class_Pipe 			管道设备
	RT_Device_Class_Portal 			双向管道设备
	RT_Device_Class_Timer 			定时器设备
	RT_Device_Class_Miscellaneous 	杂项设备
	RT_Device_Class_Unknown 		未知设备

以上为基本的设备参数，其他如I2C、SPI相关的参数有自己驱动框架，可具体查看相关代码实现。
底层还是需要用户自行实现。


